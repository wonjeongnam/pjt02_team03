---
title: "지도 기반 시각화"
format:
  html:
    theme: cosmo
    toc: true
    toc-depth: 2
    code-fold: true
---

## 🗺️ 우리 집, 위치부터 따져보자

조건을 만족하는 집은 많지만, **위치**는 우리에게 정말 중요해요.  
아래 세 가지 기준을 중심으로 지도 시각화를 진행했습니다.

---

## 🎓 1. 아이오와 주립대학교(학교) 반경 2km 이내 집 분포

학교에서 멀어질수록 등하교가 불편하고 교통비도 증가해요.  
우선 **학교에서 반경 2km 이내에 있는 집들만 시각화**해봤습니다.

```{python}
import pandas as pd
import folium
from folium.plugins import MarkerCluster

df = pd.read_csv("../data/our_df2.csv")
isu_lat, isu_lon = 42.0267, -93.6465

m = folium.Map(location=[isu_lat, isu_lon], zoom_start=14, tiles='CartoDB positron')
folium.Circle([isu_lat, isu_lon], radius=2000, color='blue', fill=True, fill_opacity=0.1, popup='ISU 2km').add_to(m)
folium.Marker([isu_lat, isu_lon], tooltip="Iowa State University", icon=folium.Icon(color="blue")).add_to(m)

cluster = MarkerCluster().add_to(m)
for _, row in df.iterrows():
    if row['dist_to_ISU'] <= 2000:
        popup = f"{row['HouseStyle']}층 / 🛏 {row['BedroomAbvGr']} / 🛁 {row['TotalFullBath']}"
        folium.Marker([row['Latitude'], row['Longitude']],
                      popup=popup,
                      icon=folium.Icon(color='green')).add_to(cluster)
m
```



🌈 2. 조건 만족도에 따라 색상 구분
우리 팀은 조건을 수치화해서 각 집마다 만족도 점수를 계산했어요.
아래 지도는 각 집의 조건 만족도 점수(score)에 따라 색상이 달라지는 시각화예요.


```{python}

import numpy as np

df["score"] = (
    (df["dist_to_ISU"] <= 2000).astype(int) +
    (df["TotalFullBath"] >= 2).astype(int) +
    (df["BedroomAbvGr"] >= 2).astype(int) +
    (df["HouseStyle"] == 2).astype(int) +
    (df["1stFlrSF"] >= 1200).astype(int) +
    (df["2ndFlrSF"] != 0).astype(int) +
    (df["CentralAir"] == 'Y').astype(int) +
    (df["HeatingQC"].isin(['TA', 'Gd', 'Ex'])).astype(int) +
    (df["KitchenAbvGr"] >= 1).astype(int) +
    (df["KitchenQual"].isin(['TA', 'Gd', 'Ex'])).astype(int) +
    (df["GarageCars"] >= 1).astype(int) +
    (df["OverallCond"] >= 5).astype(int) + 
    (df['Street'] == 'Pave').astype(int) + 
    (df['SalePrice'] <= 280000).astype(int)
)

def get_color(score):
    if score >= 14:
        return "darkgreen"
    elif score >= 13:
        return "orange"
    else:
        return 'none'

score_map = folium.Map(location=[isu_lat, isu_lon], zoom_start=13, tiles='CartoDB positron')

for _, row in df.iterrows():
    color = get_color(row['score'])
    folium.CircleMarker(
        location=[row['Latitude'], row['Longitude']],
        radius=5,
        color=color,
        fill=True,
        fill_color=color,
        fill_opacity=0.7,
        popup=f"Score: {row['score']:.1f}"
    ).add_to(score_map)

score_map
```